classdef AlignSummary
% this class stores aggregate statistics regarding event timing and is
% typically generated and stored within an AlignInfo instance. Its purpose
% is to store this information encapsulated from AlignInfo data.
% AlignSummary objects are generated by a pair of AlignDescriptor and
% ConditionDescriptor objects, because they generate a separate set of
% aggregate event occurrence statistics for each condition

    properties(SetAccess=protected)
        % AlignDescriptor object from which this was generated
        alignDescriptor
        
        % ConditionDescriptor object from which this was generated
        conditionDescriptor
    end
    
    properties(Dependent, SetAccess=protected)
        nConditions
        
        nMarks
        
        nIntervals
    end
    
    properties(SetAccess=protected)
        nTrials
        
        startMin
        startMax
        startMean
        
        stopMin
        stopMax
        stopMean
       
        % nMark x 1 cell array with nOccurrences x 1 vectors
        markMax
        markMin
        markMean
        
        % nInterval x 1 cell array with nOccurrences x 1 vectors
        intervalStartMax
        intervalStartMin
        intervalStartMean
        
        % nInterval x 1 cell array of nOccurrences x 1 vectors
        intervalStopMax
        intervalStopMin
        intervalStopMean
        
        % nConditions x 1 numeric array indicating how many trials
        % contribute to the statistics above (useful when aggregating)
        nTrialsByCondition
        
        % all times are relative to zero 
        % nConditions x 1 vector of earliest start times by condition
        startMinByCondition
        
        % nConditions x 1 vector of latest start times by condition
        startMaxByCondition
        
        % nConditions x 1 vector of mean start times by condition
        startMeanByCondition
        
        % nConditions x 1 vector of earliest stop times by condition
        stopMinByCondition
        
        % nConditions x 1 vector of earliest stop times by condition
        stopMaxByCondition
        
        % nConditions x 1 vector of mean stop times by condition
        stopMeanByCondition
        
        % nMarks x 1 cell with nConditions x nOccurrences matrices of
        % latest occurrence time(s) of that mark event (relative to the zero event)
        markMaxByCondition
        
        % nMarks x 1 cell with nConditions x nOccurrences matrices of
        % earliest occurrence time(s) of that mark event (relative to the zero event)
        markMinByCondition
        
        % nMarks x 1 cell with nConditions x nOccurrences matrices of
        % mean occurrence time(s) of that mark event (relative to the zero event)
        markMeanByCondition
        
        % nMarks x 1 cell with nIntervals x nOccurrences matrices of
        % latest occurrence time of the start of each occurrence of that interval 
        % (relative to the zero event)
        intervalStartMaxByCondition
       
        intervalStartMinByCondition
        
        intervalStartMeanByCondition
        
        intervalStopMaxByCondition
        
        intervalStopMinByCondition
        
        intervalStopMeanByCondition
    
        % these are build by initialize() 
        labelInfo
        intervalInfo
    end
    
    methods
        function as = AlignSummary()
        end
    end
    
    methods % Simple dependent properties
        function n = get.nConditions(as)
            n = numel(as.nTrialsByCondition);
        end
        
        function n = get.nMarks(as)
            n = numel(as.markMax);
        end
        
        function n = get.nIntervals(as)
            n = numel(as.intervalStartMax);
        end
    end
    
    methods(Static)
        % factory constructor method used by TDCA
        function as = buildFromConditionAlignInfo(conditionInfo, alignInfo)
            as = AlignSummary();
            as.alignDescriptor = AlignDescriptor.fromAlignDescriptor(alignInfo);
            as.conditionDescriptor = ConditionDescriptor.fromConditionDescriptor(conditionInfo);
            
            % request aligned, ungrouped data for start/stop/marks/intervals
            [startData, stopData] = alignInfo.getStartStopRelativeToZeroByTrial();
            markData = alignInfo.getAlignedMarkData();
            [intervalStartData, intervalStopData] = alignInfo.getAlignedIntervalData();
            
            % total number of valid trials contributing
            as.nTrials = nnz(alignInfo.valid);
            
             % compute summary statistics for all trials
            [as.startMin, as.startMax, as.startMean] = ...
                statsSingleEvent(startData);
            [as.stopMin, as.stopMax, as.stopMean] = ...
                statsSingleEvent(stopData);
            
            % group the data by condition into a flattened nConditions x 1
            % array
            as.nTrialsByCondition = cellfun(@numel, conditionInfo.listByCondition(:));
            [startGrouped, stopGrouped] = conditionInfo.groupElementsFlattened(startData, stopData);
 
            % compute summary statistics for each condition separately
            [as.startMinByCondition, as.startMaxByCondition, as.startMeanByCondition] = ...
                statsSingleEventByCondition(startGrouped);
            [as.stopMinByCondition, as.stopMaxByCondition, as.stopMeanByCondition] = ...
                statsSingleEventByCondition(stopGrouped);
            
            % compute summary statistics for EACH occurrence of EACH
            % mark and interval event.
            [as.markMin, as.markMax, as.markMean] = ...
                statsMultipleEvent(markData);
            [as.intervalStartMin, as.intervalStartMax, as.intervalStartMean] = ...
                statsMultipleEvent(intervalStartData);
            [as.intervalStopMin, as.intervalStopMax, as.intervalStopMean] = ...
                statsMultipleEvent(intervalStopData);
            
            % compute summary statistics for EACH occurrence of EACH
            % mark and interval event by condition
            [as.markMinByCondition, as.markMaxByCondition, as.markMeanByCondition] = ...
                statsMultipleEventByCondition(markData, conditionInfo);
            [as.intervalStartMinByCondition, as.intervalStartMaxByCondition, as.intervalStartMeanByCondition] = ...
                statsMultipleEventByCondition(intervalStartData, conditionInfo);
            [as.intervalStopMinByCondition, as.intervalStopMaxByCondition, as.intervalStopMeanByCondition] = ...
                statsMultipleEventByCondition(intervalStopData, conditionInfo);
            
            as = as.initialize();
  
            function [mn, mx, avg] = statsSingleEvent(data)
                if isempty(data)
                    [mn, mx, avg] = deal(nan(size(data, 2), 1));
                else
                    mn = nanmin(data, [], 1)';
                    mx = nanmax(data, [], 1)';
                    avg = nanmean(data, 1)';
                end
            end
            
            % internal fn to compute the min and max and mean on a simple
            % cell of vectors (scalar events)
            function [mn, mx, avg] = statsSingleEventByCondition(dataCell)
                % dataCell is nConditions x 1 cell with nTrials x
                % nOccurrences matrices
                % mn, mx, avg are nConditions x 1 cells with nOccurrence x 1
                % vectors
                
                [mn, mx, avg] = cellfun(@statsSingleEvent, dataCell);
            end
            
            function [mn, mx, avg] = statsMultipleEvent(dataCell)
                % dataCell is a nDistinctEvents (e.g. nMarks, nIntervals) cell, 
                % each of which is an nTrials x nOccurrences
                % mn, mx, avg are nDistinctEvents cell,
                % each of which is an nOccurrences vectors
                
                [mn, mx, avg] = cellfun(@statsSingleEvent, dataCell, 'UniformOutput', false);
            end

            function [mn, mx, avg] = statsMultipleEventByCondition(dataCell, ci)
                % dataCell is a nDistinctEvents (e.g. nMarks, nIntervals) cell, 
                % each of which is an nTrials x nOccurrences, to be grouped
                % into conditions by ci
                %
                % mn, mx, avg are nDistinctEvents cell,
                % each of which is an nConditions x nOccurrences matrix
                nEvents = numel(dataCell);
                nConditions = ci.nConditions;
                [mn, mx, avg] = deal(cell(nEvents, 1));
                
                if nEvents == 0
                    return;
                end
                
                for iE = 1:nEvents
                    nOccurrences = size(dataCell{iE}, 2);
                    dataGrouped = ci.groupElementsFlattened(dataCell{iE});
                    [mn{iE}, mx{iE}, avg{iE}] = deal(nan(nConditions, nOccurrences));
                    for iC = 1:nConditions
                        [mn{iE}(iC, :), mx{iE}(iC, :), avg{iE}(iC, :)] = ...
                            statsSingleEvent(dataGrouped{iC});
                    end
                end
            end
        end
        
        function as = buildByAggregation(alignSummarySet)
            % build a new AlignSummary object by aggregating over multiple
            % objects
            
            if iscell(alignSummarySet)
                set = makecol([alignSummarySet{:}]);
            else
                set = makecol(alignSummarySet);
            end
            
            as = AlignSummary();
            as.alignDescriptor = set(1).alignDescriptor;
            as.conditionDescriptor = set(1).conditionDescriptor;
            
            % TODO could check that all alignDescriptors and
            % conditionDescriptors are equivalent here, but would be slow
            
            aggNTrials = makecol([set.nTrials]); % used in nested functions below
            
            % add up trial counts
            as.nTrials = sum(aggNTrials);
            
            [as.startMin, as.startMax, as.startMean] = ...
                aggregateSingleEventStats([set.startMin], [set.startMax], [set.startMean], aggNTrials);
            [as.stopMin, as.stopMax, as.stopMean] = ...
                aggregateSingleEventStats([set.stopMin], [set.stopMax], [set.stopMean], aggNTrials);
            
            % markMax is nMarks x 1, cat(2, set.markMax) is nMarks x
            % nSummary cell arrays. Contents are nOccurrences x 1 vectors
            [as.markMax, as.markMin, as.markMean] = aggregateMultipleEventStats(...
                cat(2, set.markMax), cat(2, set.markMin), ...
                cat(2, set.markMean), aggNTrials);
            
            [as.intervalStartMax, as.intervalStartMin, as.intervalStartMean] = aggregateMultipleEventStats(...
                cat(2, set.intervalStartMax), cat(2, set.intervalStartMin), ...
                cat(2, set.intervalStartMean), aggNTrials);
            
            [as.intervalStopMax, as.intervalStopMin, as.intervalStopMean] = aggregateMultipleEventStats(...
                cat(2, set.intervalStopMax), cat(2, set.intervalStopMin), ...
                cat(2, set.intervalStopMean), aggNTrials);
    
            % nConditions x nSummary matrix of trial counts for doing
            % proper re-weighting
            nTrialsByConditionMat = cat(2, [set.nTrialsByCondition]);
            
            % add up trial counts
            as.nTrialsByCondition = sum(nTrialsByConditionMat, 2);
            
            % args are nConditions x nSummary matrices
            [as.startMinByCondition, as.startMaxByCondition, as.startMeanByCondition] = ...
                aggregateSingleEventStatsByCondition(cat(2, set.startMinByCondition), ...
                cat(2, set.startMaxByCondition), cat(2, set.startMeanByCondition), ...
                nTrialsByConditionMat);
            
            [as.stopMinByCondition, as.stopMaxByCondition, as.stopMeanByCondition] = ...
                aggregateSingleEventStatsByCondition(cat(2, set.stopMinByCondition), ...
                cat(2, set.stopMaxByCondition), cat(2, set.stopMeanByCondition), ...
                nTrialsByConditionMat);
            
            % args are nDistinctEvents (e.g. nMarks, nIntervals) x
            % nSummary cells with nCondition x nOccurrence matrices inside
            
            [as.markMaxByCondition, as.markMinByCondition, as.markMeanByCondition] = ...
                aggregateMultipleEventStatsByCondition(cat(2, set.markMaxByCondition), ...
                cat(2, set.markMinByCondition), cat(2, set.markMeanByCondition), ...
                nTrialsByConditionMat);
            
            [as.intervalStartMaxByCondition, as.intervalStartMinByCondition, as.intervalStartMeanByCondition] = ...
                aggregateMultipleEventStatsByCondition(cat(2, set.intervalStartMaxByCondition), ...
                cat(2, set.intervalStartMinByCondition), cat(2, set.intervalStartMeanByCondition), ...
                nTrialsByConditionMat);
            
            [as.intervalStopMaxByCondition, as.intervalStopMinByCondition, as.intervalStopMeanByCondition] = ...
                aggregateMultipleEventStatsByCondition(cat(2, set.intervalStopMaxByCondition), ...
                cat(2, set.intervalStopMinByCondition), cat(2, set.intervalStopMeanByCondition), ...
                nTrialsByConditionMat);
            
            as = as.initialize();
            
            function [maxNew, minNew, meanNew] = aggregateSingleEventStats(...
                    maxData, minData, meanData, nTrialsData)
                minNew = nanmin(minData);
                maxNew = nanmax(maxData);
                meanNew = nansum(makecol(meanData) .* makecol(nTrialsData)) / sum(nTrialsData);
            end
            
            function [maxNew, minNew, meanNew] = aggregateSingleEventStatsByCondition(...
                    maxData, minData, meanData, nTrialsMat)
                [maxNew, minNew, meanNew] = deal(nanvec(size(maxData, 1)));
                for iC = 1:size(maxData, 1)
                    [maxNew(iC), minNew(iC), meanNew(iC)] = ...
                        aggregateSingleEventStats(maxData(iC, :), minData(iC, :), ...
                        meanData(iC, :), nTrialsMat(iC, :));
                end
            end
            
            function [maxNew, minNew, meanNew] = aggregateMultipleEventStats(...
                    maxData, minData, meanData, nTrialsData)
                % max/min/meanData are nDistinctEvents x nSummary cells of
                % nOccurrences vectors.
                %
                % nTrialsData is nSummary x 1 vector
                % 
                % max/min/meanNew are nDistinctEvents cells of nOccurrences
                % vectors
                nDistinctEvents = size(maxData, 1);
                nSummary = size(maxData, 2);
                nOccurrences = cellfun(@numel, maxData);
                maxOccurrencesByEvent = max(nOccurrences, [], 2);
                
                [maxNew, minNew, meanNew] = deal(cell(nDistinctEvents, 1));
                
                for iEv = 1:nDistinctEvents
                    padToLength = @(vec) [makecol(vec); ...
                        nan(maxOccurrencesByEvent(iEv)-numel(vec), 1)];
                    % *Mat is maxOccurrencesByEvent x nSummary
                    maxMat = cell2mat(cellfun(padToLength, maxData(iEv, :), ...
                        'UniformOutput', false));
                    minMat = cell2mat(cellfun(padToLength, minData(iEv, :), ...
                        'UniformOutput', false));
                    meanMat = cell2mat(cellfun(padToLength, meanData(iEv, :), ...
                        'UniformOutput', false));
                    
                    % cell elements are maxOccurrencesByEvent x 1 vectors
                    maxNew{iEv} = nanmax(maxMat, [], 2);
                    minNew{iEv} = nanmin(minMat, [], 2);
                    
                    % note that we use nanmean to compute the weighted sum
                    % because nansum returns 0 when all are NaN
                    meanNew{iEv} = nanmean(bsxfun(@times, meanMat, makerow(nTrialsData)), 2) / ...
                        sum(nTrialsData / nSummary);
                end
            end
            
            function [maxNew, minNew, meanNew] = aggregateMultipleEventStatsByCondition(...
                    maxData, minData, meanData, nTrialsData)
                % max/min/meanData are nMarks x nSummary cells with 
                % nConditions x nOccurrence matrices inside
                %
                % nTrials Data is nConditions x nSummary matrix
                %
                % max/min/meanNew are nMarks cell arrays with 
                % nConditions x nOccurrence matrices inside
                
                nDistinctEvents = size(maxData, 1);
                nSummary = size(maxData, 2);
                
                % nMarks x nSummary
                nOccurrences = cellfun(@(x) size(x, 2), maxData);
                % nMarks x 1
                maxOccurrencesByEvent = max(nOccurrences, [], 2);
                
                % nConditions x 1 x nSummary
                nTrialsReshaped = permute(nTrialsData, [1 3 2]);
                nTrialsTotalByCondition = sum(nTrialsData, 2);
                
                [maxNew, minNew, meanNew] = deal(cell(nDistinctEvents, 1));
                
                for iEv = 1:nDistinctEvents
                    padToWidth = @(mat) [mat, ...
                        nan(size(mat, 1), maxOccurrencesByEvent(iEv)-size(mat, 2))];
                    
                    % output of cellfun is 1 x 1 x nSummary.
                    %   contents are nConditions x maxOccurrences.
                    % output of cell2mat is nConditions x maxOccurrences x nSummary
                    maxMat = cell2mat(cellfun(padToWidth, shiftdim(maxData(iEv, :), -1), ...
                        'UniformOutput', false));
                    minMat = cell2mat(cellfun(padToWidth, shiftdim(minData(iEv, :), -1), ...
                        'UniformOutput', false));
                    meanMat = cell2mat(cellfun(padToWidth, shiftdim(meanData(iEv, :), -1), ...
                        'UniformOutput', false));
                    
                    % maxNew{iEv} is nConditions x maxOccurrences
                    maxNew{iEv} = nanmax(maxMat, [], 3);
                    minNew{iEv} = nanmin(minMat, [], 3);
                    
                    % meanMat is nConditions x maxOccurrences x nSummary
                    % output of nansum is nConditions x maxOccurrences
                    % nTrialsTotalByCondition is nConditions x 1
                    % 
                    % note that we use nanmean to compute the weighted sum
                    % because nansum returns 0 when all are NaN
                    meanNew{iEv} = bsxfun(@rdivide, nanmean(bsxfun(@times, meanMat, nTrialsReshaped), 3), ...
                        nTrialsTotalByCondition / nSummary);
                end
            end
           
        end
    end

    methods(Access=protected) % Builds internal properties at construction time
        function as = initialize(as)
            assert(nargout == 1);
            as = as.buildLabelInfo();
            as = as.buildIntervalInfo();
        end
        
        function as = buildLabelInfo(as, varargin)
            % build a list of events to mark on the time axis or on data by
            % aggregating across the start, stop, zero, and marks. 
            
            assert(nargout == 1);
           
            % optionally provide time window which filters which labels will be included
            p = inputParser();
            p.addParamValue('timeWindow', [], @isvector);
            p.parse(varargin{:});
            timeWindow = p.Results.timeWindow;

            ad = as.alignDescriptor;
            nConditions = as.conditionDescriptor.nConditions;

            info = struct('name', {}, 'time', {}, 'min', {}, 'max', {}, 'appear', {}, 'fixed', {});
            counter = 1;

            % include the zero event provided that it lies within the start/stop window
            if ad.zeroMark
                info(counter).name = ad.zeroLabel; 
                info(counter).time = 0;
                info(counter).min = 0;
                info(counter).max = 0;
                info(counter).timeByCondition = zeros(nConditions, 1);
                info(counter).minByCondition = zeros(nConditions, 1);
                info(counter).maxByCondition = zeros(nConditions, 1);
                info(counter).appear = ad.zeroAppear;
                info(counter).fixed = true;
                
                counter = counter + 1;
            end
            
            % label the start event
            if ad.startMark
                info(counter).name = ad.startLabel;
                info(counter).time = as.startMean;
                info(counter).min = as.startMin;
                info(counter).max = as.startMax;
                info(counter).timeByCondition = as.startMeanByCondition;
                info(counter).minByCondition = as.startMinByCondition;
                info(counter).maxByCondition = as.startMaxByCondition;
                info(counter).appear = ad.startAppear;
                info(counter).fixed = ad.isStartFixedTime;
                
                counter = counter + 1;
            end

            % label the stop event
            if ad.stopMark
                info(counter).name = ad.stopLabel;
                info(counter).time = as.stopMean;
                info(counter).min = as.stopMin;
                info(counter).max = as.stopMax;
                info(counter).timeByCondition = as.stopMeanByCondition;
                info(counter).minByCondition = as.stopMinByCondition;
                info(counter).maxByCondition = as.stopMaxByCondition;
                info(counter).appear = ad.stopAppear;
                info(counter).fixed = ad.isStopFixedTime;
                
                counter = counter + 1;
            end

            % label each of the event marks that are fixed with respect to the zero event
            for iMark = 1:ad.nMarks
                % mark time is identical for each trial
                info(counter).name = ad.markLabels{iMark};
                info(counter).time = as.markMean(iMark);
                info(counter).min = as.markMin(iMark);
                info(counter).max = as.markMax(iMark);
                info(counter).timeByCondition = as.markMeanByCondition{iMark};
                info(counter).minByCondition = as.markMinByCondition{iMark};
                info(counter).maxByCondition = as.markMaxByCondition{iMark};
                info(counter).appear = ad.markAppear{iMark};
                info(counter).fixed = ad.isMarkFixedTime(iMark);
                
                counter = counter + 1;
            end
            
            if ~isempty(timeWindow)
                times = [info.time];
                timeMask = times >= timeWindow(1) & times <= timeWindow(2);
                info = info(timeMask);
            end
            
            as.labelInfo = makecol(info);
        end
        
        function as = buildIntervalInfo(as, varargin)
            assert(nargout == 1);
        
            ad = as.alignDescriptor;
            
            info = struct('name', {}, 'startTime', {}, 'startMin', {}, 'startMax', {}, 'appear', {}, 'fixed', {});
             
            for iInterval = 1:ad.nIntervals
                info(iInterval).name = ad.markLabels{iInterval};
                info(iInterval).startTime = as.intervalStartMean(iInterval);
                info(iInterval).startMin = as.intervalStartMin(iInterval);
                info(iInterval).startMax = as.intervalStartMax(iInterval);
                info(iInterval).stopTime = as.intervalStopMean(iInterval);
                info(iInterval).stopMin = as.intervalStopMin(iInterval);
                info(iInterval).stopMax = as.intervalStopMax(iInterval);
                info(iInterval).startTimeByCondition = as.intervalStartMeanByCondition{iInterval};
                info(iInterval).startMinByCondition = as.intervalStartMinByCondition{iInterval};
                info(iInterval).startMaxByCondition = as.intervalStartMaxByCondition{iInterval};
                info(iInterval).stopTimeByCondition = as.intervalStopMeanByCondition{iInterval};
                info(iInterval).stopMinByCondition = as.intervalStopMinByCondition{iInterval};
                info(iInterval).stopMaxByCondition = as.intervalStopMaxByCondition{iInterval};
                
                info(iInterval).fixed = ad.isIntervalFixedTime(iInterval);
            end
            
            as.intervalInfo = info;
        end
    end

    methods
        function drawOnTimeseries(as, data, tvec, varargin)
        % annotate data time-series with markers according to the labels indicated
        % by this AlignSummary
        %
        % data is T x D x N matrix
        % tvec is T x 1
        %
        % where
        % D is data dimensionality, 1 or 2 or 3
        % T is number of time points
        % N is the number of traces to be annotated
            p = inputParser();
            p.addParamValue('drawLegend', false, @islogical);
            p.parse(varargin{:});
            drawLegend = p.Results.drawLegend;
            
            T = size(data, 1);
            D = size(data, 2);
            % N = size(data, 3);
            assert(isvector(tvec) && numel(tvec) == T, 'tvec must be vector with length == size(data, 2)');
            assert(D >= 1 && D <= 3, 'Dimensionality of timeseries, size(data, 2), must be 1,2,3');

            hold on

            nLabels = numel(as.labelInfo);
            hleg = nan(nLabels, 1);
            legstr = cell(nLabels, 1);
            
            labelTimes = [ad.labelInfo.time];
            
            % nLabels x D x N
            labelPositions = interp1(tvec, data, labelTimes, 'linear');
            
            for iLabel = 1:nLabels
                info = ad.labelInfo(iLabel);
                legstr{iLabel} = info.name;
                plotArgs = info.appear.getPlotArgs();
                
                if D == 1
                    hleg(iLabel) = plot(labelTimes(1), squeeze(labelPositions(iLabel, 1, :)), ...
                        'k.', 'MarkerSize', 10, plotArgs{:});
                elseif D == 2
                    hleg(iLabel) = plot(squeeze(labelPositions(iLabel, 1, :)), squeeze(labelPositions(iLabel, 2, :)), ...
                        'k.', 'MarkerSize', 10, plotArgs{:});
                else
                    hleg(iLabel) = plot3(squeeze(labelPositions(iLabel, 1, :)), ...
                        squeeze(labelPositions(iLabel, 2, :)), ...
                        squeeze(labelPositions(iLabel, 3, :)), ...
                        'k.', 'MarkerSize', 10, plotArgs{:});
                end
            end
                
            if drawLegend
                legend(hleg, legstr, 'Location', 'NorthEast');
                legend boxoff;
            end
        end
        
        function drawOnTimeseriesByCondition(as, data, tvec, varargin)
        % annotate data time-series with markers according to the labels indicated
        % by this AlignSummary, on a per-condition basis
        %
        % data is T x D x C x N matrix
        % tvec is T x 1
        %
        % where
        % D is data dimensionality, 1 or 2 or 3
        % T is number of time points
        % C is number of conditions
        % N is the number of traces to be annotated
            p = inputParser();
            p.addParamValue('drawLegend', false, @islogical);
            p.addParamValue('conditionIdx', truevec(as.conditionDescriptor.nConditions), @isvector);
            p.parse(varargin{:});
            drawLegend = p.Results.drawLegend;
            
            conditionIdx = p.Results.conditionIdx;
            if islogical(conditionIdx)
                conditionIdx = find(conditionIdx);
            end
            nConditions = numel(conditionIdx);
            
            T = size(data, 1);
            D = size(data, 2);
            C = size(data, 3);
            % N = size(data, 4);
           
            assert(isvector(tvec) && numel(tvec) == T, 'Time vector must be size(data, 1)');
            assert(D >= 1 && D <= 3, 'Dimensionality of timeseries, size(data, 2), must be 1,2,3');
            assert(C == nConditions, 'size(data, 3) must match nConditions specified');

            hold on

            nLabels = numel(as.labelInfo);
            hleg = nan(nLabels, 1);
            legstr = cell(nLabels, 1);
            
            % nLabels x nConditions
            if isempty(as.labelInfo)
                return;
            end
            labelTimes = cat(2, as.labelInfo.timeByCondition)';
            
            for iCondition = 1:nConditions
                c = conditionIdx(iCondition);
                labelTimesThisCondition = labelTimes(:, c);
                
                % labelPositions will be nLabels x D x N
                labelPositions = interp1(tvec, squeeze(data(:, :, iCondition, :)), labelTimesThisCondition, 'linear');
                
                for iLabel = 1:nLabels
                    info = as.labelInfo(iLabel);
                    legstr{iLabel} = info.name;
                    if ~isempty(info.appear)
                        plotArgs = info.appear.getPlotArgs();
                    else
                        plotArgs = {};
                    end
                    
                    if D == 1
                        hleg(iLabel) = plot(labelTimes(1), squeeze(labelPositions(iLabel, 1, :)), ...
                            'ko', 'MarkerFaceColor', 'k', 'MarkerSize', 20, plotArgs{:});
                    elseif D == 2
                        hleg(iLabel) = plot(squeeze(labelPositions(iLabel, 1, :)), squeeze(labelPositions(iLabel, 2, :)), ...
                            'ko', 'MarkerFaceColor', 'k', 'MarkerSize', 20, plotArgs{:});
                    else
                        hleg(iLabel) = plot3(squeeze(labelPositions(iLabel, 1, :)), ...
                            squeeze(labelPositions(iLabel, 2, :)), ...
                            squeeze(labelPositions(iLabel, 3, :)), ...
                            'ko', 'MarkerFaceColor', 'k', 'MarkerSize', 20, plotArgs{:});
                    end
                end
            end
                
            if drawLegend
                legend(hleg, legstr, 'Location', 'NorthEast');
                legend boxoff;
            end
        end
        
        % used to annotate a time axis with the relevant start/stop/zero/marks
        % non-fixed marks as <markLabel> unless the range is less than a specified 
        % noise-threshold, in which case it is marked as though it were fixed
%         function drawTimeAxis(ad, varargin)
%             timeInfo = ad.timeInfo;
% 
%             % uses ad.labelInfo to call drawPrettyAxis
%             tLims = [];
%            % xLabel = ''; 
%             axh = [];
%             drawY = true; % also draw the y axis while we're here? otherwise they'll be nothing there
%             setXLim = false;
%             assignargs(varargin);
% 
%             if isempty(axh)
%                 axh = gca;
%             end
%             if isempty(tLims)
%                 if setXLim
%                     tLims = ad.getTimeAxisLims(timeInfo); %#ok<UNRCH>
%                 else
%                     tLims = xlim(axh);
%                 end
%             end
%             tMin = tLims(1);
%             tMax = tLims(2);
%               
%             labelInfo = ad.getLabelInfo(timeInfo, 'tMin', tMin, 'tMax', tMax);
%             tickPos = [labelInfo.time];
%             tickLabels = {labelInfo.name};
%             tickAlignments = {labelInfo.align};
%                      
%             if setXLim
%                 xlim([min(tickPos), max(tickPos)]);
%             end
%             
%             if drawY
%                 makePrettyAxis('yOnly', true); 
%             else
%                 axis(axh, 'off');
%                 box(axh, 'off');
%             end
%             
%             if all(~isnan(tLims))
%                 drawAxis(tickPos, 'tickLabels', tickLabels, 'tickAlignments', tickAlignments, 'axh', axh); 
%             end
%         end

    end

end
