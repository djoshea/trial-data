classdef AlignSummary
% this class stores aggregate statistics regarding event timing and is
% typically generated and stored within an AlignInfo instance. Its purpose
% is to store this information encapsulated from AlignInfo data.
% AlignSummary objects are generated by a pair of AlignDescriptor and
% ConditionDescriptor objects, because they generate a separate set of
% aggregate event occurrence statistics for each condition

    properties
        % AlignDescriptor object from which this was generated
        alignDescriptor
        
        % ConditionDescriptor object from which this was generated
        conditionDescriptor
    end

    methods % Labeling and axis drawing
        % struct with fields .time and and .name with where to label the time axis appropriately
        % pass along timeInfo so that the medians of non-fixed events can be labeled as well 
        function [labelInfo] = getLabelInfo(ad, varargin)
            % build a list of label names / times to mark on the time axis 
            % when using this alignment. Essentially, all events which are fixed relative
            % to zero (i.e. reference off the same event) will be included as labels
            % also, if 'tMin' and 'tMax' are specified, they will be drawn as well provided that 
            % the start and stop events aren't fixed relative to zero 
            
            timeInfo = ad.timeInfo;  %#ok<*PROP>
            
            % optionally provide time window which filters which labels will be included
            tMin = [];
            tMax = [];
            assignargs(varargin);

            labelInfo = struct('name', {}, 'time', {}, 'align', {}, 'info', {}, ...
                'markData', {}, 'fixed', {});
            counter = 1;

            drewStartLabel = false;

            % label the start event / min limit
            if ad.isStartFixedTime 
                if ~ad.isStartZero
                    % fixed but not redundant with zero
                    labelInfo(counter).name = ad.startLabel;
                    labelInfo(counter).time = ad.startOffset - ad.zeroOffset;
                    labelInfo(counter).align = 'left';
                    labelInfo(counter).info = ad.startInfo;
                    labelInfo(counter).markData = ad.startMarkData;
                    labelInfo(counter).fixed = true;
                    counter = counter + 1;
                    drewStartLabel = true;
                end
            else
                % label at minimum time
                labelInfo(counter).name = ad.startLabel;
                labelInfo(counter).time = min([timeInfo.start] - [timeInfo.zero]);
                labelInfo(counter).align = 'left';
                labelInfo(counter).info = ad.startInfo;
                labelInfo(counter).markData = ad.startMarkData;
                labelInfo(counter).fixed = true;
                counter = counter + 1;
                drewStartLabel = true;
            end
            
            % label the zero event provided that it lies within the start/stop window
            if ~ad.isZeroOutsideStartStop
                labelInfo(counter).name = ad.zeroLabel; 
                labelInfo(counter).time = 0;
                if drewStartLabel
                    labelInfo(counter).align = 'center';
                else
                    labelInfo(counter).align = 'left';
                end
                labelInfo(counter).info = ad.zeroInfo;
                labelInfo(counter).markData = ad.zeroMarkData;
                labelInfo(counter).fixed = true;
                counter = counter + 1;
            end

            % label the stop event / max limit
            if ad.isStopFixedTime
                if ~ad.isStopZero
                    % fixed but not redundant with zero
                    labelInfo(counter).name = ad.stopLabel; 
                    labelInfo(counter).time = ad.stopOffset - ad.zeroOffset;
                    labelInfo(counter).align = 'right';
                    labelInfo(counter).info = ad.stopInfo;
                    labelInfo(counter).markData = ad.stopMarkData;
                    labelInfo(counter).fixed = true;
                    counter = counter + 1;
                end
            else
                labelInfo(counter).name = ad.stopLabel; 
                labelInfo(counter).time = max([timeInfo.stop] - [timeInfo.zero]);
                labelInfo(counter).align = 'right';
                labelInfo(counter).info = ad.stopInfo;
                labelInfo(counter).markData = ad.stopMarkData;
                labelInfo(counter).fixed = true;
                counter = counter + 1;
            end

            % label each of the event marks that are fixed with respect to the zero event
            isMarkFixed = ad.isMarkFixedTime;
            for iMark = 1:length(ad.markEvents)
                if isMarkFixed(iMark)
                    % mark time is identical for each trial
                    labelInfo(counter).name = ad.markLabels{iMark};
                    labelInfo(counter).time = ad.markOffsets(iMark) - ad.zeroOffset;
                    labelInfo(counter).align = 'center';
                    labelInfo(counter).info = ad.markInfo{iMark};
                    labelInfo(counter).fixed = true;
                    labelInfo(counter).markData = ad.markMarkData(iMark);
                    counter = counter + 1;

                elseif ~isempty(timeInfo)
                    % compute the median time for this mark and put it down with <brackets>
                    % for now, mark only the first event occurrence
                    if iscell(timeInfo(1).mark)
                        markTimes = arrayfun(@(ti) ti.mark{iMark}(1) - ti.zero, ...
                            timeInfo([timeInfo.valid]), 'ErrorHandler', @(varargin) NaN);
                    else
                        markTimes = arrayfun(@(ti) ti.mark(iMark) - ti.zero, ...
                            timeInfo([timeInfo.valid]));
                    end
                    
                    medianMarkTime = nanmedian(markTimes);
                    minMarkTime = nanmin(markTimes);
                    maxMarkTime = nanmax(markTimes);

                    if abs(minMarkTime - medianMarkTime) <= ad.markRelativeDeltaIgnore && ...
                       abs(maxMarkTime - medianMarkTime) <= ad.markRelativeDeltaIgnore
                       % range acceptable, don't use < > brackets
                       fmat = '%s';
                       labelInfo(counter).fixed = true;
                    else
                       % mark median with < > brackets to indicate there is
                       % a range
                        if ad.markPlotMedians
                            fmat = '<%s>';
                            labelInfo(counter).fixed = false;
                        else
                            % not plotting medians, move to next mark
                            continue;
                        end
                    end
                    
                    labelInfo(counter).name = sprintf(fmat, ad.markLabels{iMark});
                    labelInfo(counter).time = medianMarkTime;
                    labelInfo(counter).align = 'center';
                    labelInfo(counter).markData = ad.markMarkData(iMark);
                    labelInfo(counter).info = ad.markInfo{iMark};
                    counter = counter + 1;
                end
            end
                 
            if ~isempty(tMin)
                % start not fixed, include one for the lower limit tMin
                % first check whether there is an existing label (from a
                % mark) at this point already...
                if ~any(floor([labelInfo.time]) == floor(tMin))
                    labelInfo(counter).name = ad.buildLabel(ad.zeroEvent, ad.zeroEventIndex, tMin);
                    labelInfo(counter).time = tMin;
                    labelInfo(counter).align = 'left';
                    labelInfo(counter).markData = false; % this is just convenience, don't mark on data
                    labelInfo(counter).fixed = true;
                    counter = counter + 1;
                    drewStartLabel = true; %#ok<NASGU>
                end
            end
                     
            if ~isempty(tMax)
                % stop not fixed, include one for the upper limit tMin
                % first check whether there is an existing label (from a
                % mark) at this point already...
                if ~any(floor([labelInfo.time]) == floor(tMax))
                    labelInfo(counter).name = ad.buildLabel(ad.zeroEvent, ad.zeroEventIndex, tMax);
                    labelInfo(counter).time = tMax;
                    labelInfo(counter).align = 'right';
                    labelInfo(counter).markData = false;
                    labelInfo(counter).fixed = true;
                    counter = counter + 1; %#ok<NASGU>
                end
            end

            % generate default label info where missing
            cmap = jet(length(labelInfo));
            for i = 1:length(labelInfo)
                default = struct('color', cmap(i, :), 'size', 10, 'marker', 'o');
                if isempty(labelInfo(i).info)
                    labelInfo(i).info = default;
                else
                    labelInfo(i).info = structMerge(default, labelInfo(i).info, 'warnOnOverwrite', false);
                end
            end
            
            times = [labelInfo.time];
            timeMask = true(size(times));
            if ~isempty(tMin)
                timeMask = timeMask & times >= tMin;
            end
            if ~isempty(tMax)
                timeMask = timeMask & times <= tMax;
            end
            labelInfo = labelInfo(timeMask);
            
            labelInfo = makecol(labelInfo);
        end
        
        function [info, valid] = getIntervalInfoByCondition(ad, ciOrig, varargin)
            % using the conditions picked out by ConditionInfo ci and the event info found in data
            % R, compute the start and stop times for each interval defined by this AlignDescriptor
            % 
            % info is a nConditions x 1 cell containing a struct with the data on each
            % of the intervals for that condition
            %
            % currently uses first trial from each condition's intervals,
            % but double checks that all trials have the same number of
            % start/stops within each interval
        
            timeInfo = ad.timeInfo;
            
            % TODO Implement condition matching
            valid = [timeInfo.valid];
            ci = ciOrig.markInvalid(~valid);
            
            nIntervals = size(ad.intervalEventsStart,1);
            info = struct();
             
            for iC = 1:ci.nConditions
                rMask = ci.listByCondition{iC};
                info(iC).interval = cell(nIntervals, 1);
                
                for iInt = 1:nIntervals
                    if isempty(rMask)
                        % no trials, fill with nan
                        info(iC).interval{iInt} = [NaN NaN];
                    else
                        % check that all trials within condition have the same number
                        % of periods for this interval
                        nPeriods = arrayfun(@(ti) size(ti.intervalStart{iInt}, 1), timeInfo(rMask));
                        if length(unique(nPeriods)) > 1
                            debug('WARNING: Trials within condition have differing number of periods for interval %d\n', iInt);
                        end

                        % grab the interval info from the first trial
                        info(iC).intervalStart{iInt} = timeInfo(rMask(1)).intervalStart{iInt} - timeInfo(rMask(1)).zero;
                        info(iC).intervalStop{iInt} = timeInfo(rMask(1)).intervalStop{iInt} - timeInfo(rMask(1)).zero;
                        
                    end
                end
            end
        end
        
        % used to annotate a time axis with the relevant start/stop/zero/marks
        % non-fixed marks as <markLabel> unless the range is less than a specified 
        % noise-threshold, in which case it is marked as though it were fixed
        function drawTimeAxis(ad, varargin)
            timeInfo = ad.timeInfo;

            % uses ad.labelInfo to call drawPrettyAxis
            tLims = [];
           % xLabel = ''; 
            axh = [];
            drawY = true; % also draw the y axis while we're here? otherwise they'll be nothing there
            setXLim = false;
            assignargs(varargin);

            if isempty(axh)
                axh = gca;
            end
            if isempty(tLims)
                if setXLim
                    tLims = ad.getTimeAxisLims(timeInfo); %#ok<UNRCH>
                else
                    tLims = xlim(axh);
                end
            end
            tMin = tLims(1);
            tMax = tLims(2);
              
            labelInfo = ad.getLabelInfo(timeInfo, 'tMin', tMin, 'tMax', tMax);
            tickPos = [labelInfo.time];
            tickLabels = {labelInfo.name};
            tickAlignments = {labelInfo.align};
                     
            if setXLim
                xlim([min(tickPos), max(tickPos)]);
            end
            
            if drawY
                makePrettyAxis('yOnly', true); 
            else
                axis(axh, 'off');
                box(axh, 'off');
            end
            
            if all(~isnan(tLims))
                drawAxis(tickPos, 'tickLabels', tickLabels, 'tickAlignments', tickAlignments, 'axh', axh); 
            end
        end

        % annotate data time-series with markers according to the labels indicated
        % by this align descriptor
        %
        % N is the number of traces to be annotated
        % T is number of time points
        % D is data dimensionality e.g. 1 or 2 or 3)
        %
        % the sizes of timeInfo and data may be one of the following:
        %   one-trial per data trace:
        %     timeInfo is N x 1 struct vec
        %     timeData is N x T matrix or N x 1 cell of T_i vectors
        %     data is N x T x D matrix or N x 1 cell of T_i x D matrices
        %
        %   many-trials per data trace:
        %     timeInfo is N x 1 cell array of ? x 1 struct vecs 
        %     timeData is N x T matrix or N x 1 cell of T_i vectors
        %     data is N x T x D matrix or N x 1 cell of T_i x D matrices 
        %     for this, the median will be computed for each data trace in timeInfo{:} and plotted accordingly
        %     on each of the N groups of timeInfos on data(m, :, :)
        %
        function drawOnData(ad, timeData, data, varargin)
            p = inputParser();
            p.addParamValue('drawLegend', false, @islogical);
            p.parse(varargin{:});
            
            timeInfo = ad.timeInfo;

            hold on

            N = length(timeInfo);
            assert(isvector(timeInfo) && (isstruct(timeInfo) || iscell(timeInfo)), ...
                'timeInfo must be struct vector or cell vector');
            assert(iscell(data) || N == size(data, 1), 'Length of timeInfo must match size(data, 1)');
            assert(~iscell(data) || (isvector(data) && N == length(data)), 'Data length must match timeInfo');
            assert(iscell(timeData) || N == size(timeData, 1), 'Length of timeInfo must match size(timeData, 1)');
            assert(~iscell(timeData) || (isvector(timeData) && N == length(timeData)), 'TimeData length must match timeInfo');
            assert(iscell(timeData) == iscell(data), 'TimeData and Data must both be cells or both matrices');

            hleg = nan(size(timeInfo));
            legstr = cell(size(timeInfo));
            for i = 1:length(timeInfo)
                if iscell(timeInfo)
                    % each time info is for a single data
                    ti = timeInfo{i};
                else
                    ti = timeInfo(i);
                end
                labelInfo = ad.getLabelInfo(ti);
                
                if iscell(data)
                    tvec = timeData{i};
                    dmat = data{i};
                else
                    tvec = squeeze(timeData(i, :));
                    dmat = squeeze(data(i, :, :));
                end
                
                if ~isempty(dmat)
                    drawOnSingle(ti, tvec, dmat, labelInfo);
                end
            end
            
            if p.Results.drawLegend
                idx = 1;
                for iLabel = 1:length(labelInfo)
                    info = labelInfo(iLabel).info;
                    if ~labelInfo(iLabel).markData
                        continue;
                    end
                    hleg(idx) = plot(NaN, NaN, info.marker, 'MarkerFaceColor', info.color, ...
                        'MarkerEdgeColor', info.color, 'MarkerSize', info.size);
                    legstr{idx} = labelInfo(iLabel).name;
                    idx = idx + 1;
                end
                
                legend(hleg, legstr, 'Location', 'NorthEast');
                legend boxoff;
            end
            
            function drawOnSingle(timeInfo, timeVec, dmat, labelInfo)
                % timeInfo is a struct array or single struct
                % dmat is T x D matrix
                nDim = size(dmat, 2);

                for iLabel = 1:length(labelInfo)
                    if ~labelInfo(iLabel).markData
                        continue;
                    end
                    info = labelInfo(iLabel).info;
                    ind = find(floor(labelInfo(iLabel).time) == floor(timeVec), 1);
                    if isempty(ind), continue, end
                    dvec = dmat(ind, :);
                    extraArgs = {info.marker, 'MarkerFaceColor', info.color, ...
                            'MarkerEdgeColor', info.color, 'MarkerSize', info.size};
                    if nDim == 1
                        plot(timeVec(ind), dvec(1), extraArgs{:});
                    elseif nDim == 2
                        plot(dvec(1), dvec(2), extraArgs{:});
                    elseif nDim == 3
                        plot3(dvec(1), dvec(2), dvec(3), extraArgs{:});
                    end
                end
                labelInfo = struct('name', {}, 'time', {}, 'align', {}, 'info', {}, ...
                    'markOndmat', {}, 'fixed', {});
            end
        end
    end

end